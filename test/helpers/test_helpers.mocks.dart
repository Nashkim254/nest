// Mocks generated by Mockito 5.4.5 from annotations
// in nest/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:io' as _i12;
import 'dart:ui' as _i10;

import 'package:flutter/material.dart' as _i8;
import 'package:logger/logger.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:nest/abstractClasses/deep_link_handler_interface.dart' as _i24;
import 'package:nest/models/api_response.dart' as _i3;
import 'package:nest/models/create_event.dart' as _i32;
import 'package:nest/models/login_model.dart' as _i21;
import 'package:nest/models/message_models.dart' as _i16;
import 'package:nest/models/organization_model.dart' as _i29;
import 'package:nest/models/registration_model.dart' as _i20;
import 'package:nest/models/update_profile_input.dart' as _i28;
import 'package:nest/services/api_service.dart' as _i18;
import 'package:nest/services/auth_service.dart' as _i19;
import 'package:nest/services/deep_link_generator_service.dart' as _i25;
import 'package:nest/services/deep_link_service.dart' as _i23;
import 'package:nest/services/event_service.dart' as _i31;
import 'package:nest/services/file_service.dart' as _i30;
import 'package:nest/services/global_service.dart' as _i11;
import 'package:nest/services/image_service.dart' as _i13;
import 'package:nest/services/location_service.dart' as _i22;
import 'package:nest/services/message_service.dart' as _i17;
import 'package:nest/services/share_service.dart' as _i26;
import 'package:nest/services/shared_preferences_service.dart' as _i2;
import 'package:nest/services/user_service.dart' as _i27;
import 'package:nest/services/websocket_service.dart' as _i14;
import 'package:nest/ui/common/app_enums.dart' as _i15;
import 'package:shared_preferences/shared_preferences.dart' as _i4;
import 'package:stacked_services/stacked_services.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSharedPreferencesService_0 extends _i1.SmartFake
    implements _i2.SharedPreferencesService {
  _FakeSharedPreferencesService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_1<T1> extends _i1.SmartFake
    implements _i3.ApiResponse<T1> {
  _FakeApiResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_2 extends _i1.SmartFake
    implements _i4.SharedPreferences {
  _FakeSharedPreferences_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_3 extends _i1.SmartFake implements _i5.Logger {
  _FakeLogger_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i6.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i8.GlobalKey<_i8.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i8.GlobalKey<_i8.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i6.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<T?>? navigateWithTransition<T>(
    _i8.Widget? page, {
    bool? opaque,
    String? transition = '',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i8.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i6.Transition? transitionClass,
    _i6.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? replaceWithTransition<T>(
    _i8.Widget? page, {
    bool? opaque,
    String? transition = '',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i8.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i6.Transition? transitionClass,
    _i6.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i8.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i8.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? navigateToView<T>(
    _i8.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i8.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i6.Transition? transition,
    _i6.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i8.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? clearStackAndShowView<T>(
    _i8.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? clearTillFirstAndShowView<T>(
    _i8.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);

  @override
  _i9.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i8.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i9.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i6.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i6.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i6.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = 'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i9.Future<_i6.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i9.Future<_i6.SheetResponse<dynamic>?>.value(),
      ) as _i9.Future<_i6.SheetResponse<dynamic>?>);

  @override
  _i9.Future<_i6.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i10.Color? barrierColor = const _i10.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = '',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i9.Future<_i6.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i9.Future<_i6.SheetResponse<T>?>.value(),
      ) as _i9.Future<_i6.SheetResponse<T>?>);

  @override
  void completeSheet(_i6.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i6.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i6.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i8.Widget Function(
      _i8.BuildContext,
      _i6.DialogRequest<dynamic>,
      dynamic Function(_i6.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i6.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i10.Color? cancelTitleColor,
    String? buttonTitle = 'Ok',
    _i10.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i8.RouteSettings? routeSettings,
    _i8.GlobalKey<_i8.NavigatorState>? navigatorKey,
    _i6.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i9.Future<_i6.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i9.Future<_i6.DialogResponse<dynamic>?>.value(),
      ) as _i9.Future<_i6.DialogResponse<dynamic>?>);

  @override
  _i9.Future<_i6.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i10.Color? barrierColor = const _i10.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = '',
    bool? useSafeArea = true,
    _i8.RouteSettings? routeSettings,
    _i8.GlobalKey<_i8.NavigatorState>? navigatorKey,
    _i8.RouteTransitionsBuilder? transitionBuilder,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #routeSettings: routeSettings,
            #navigatorKey: navigatorKey,
            #transitionBuilder: transitionBuilder,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i9.Future<_i6.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i9.Future<_i6.DialogResponse<T>?>.value(),
      ) as _i9.Future<_i6.DialogResponse<T>?>);

  @override
  _i9.Future<_i6.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = 'Cancel',
    _i10.Color? cancelTitleColor,
    String? confirmationTitle = 'Ok',
    _i10.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i8.RouteSettings? routeSettings,
    _i6.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #routeSettings: routeSettings,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i9.Future<_i6.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i9.Future<_i6.DialogResponse<dynamic>?>.value(),
      ) as _i9.Future<_i6.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i6.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GlobalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalService extends _i1.Mock implements _i11.GlobalService {
  @override
  int get selectedHomeTabIndex => (super.noSuchMethod(
        Invocation.getter(#selectedHomeTabIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set setIndex(int? val) => super.noSuchMethod(
        Invocation.setter(
          #setIndex,
          val,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String getQueryParam(String? ext) => (super.noSuchMethod(
        Invocation.method(
          #getQueryParam,
          [ext],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getQueryParam,
            [ext],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getQueryParam,
            [ext],
          ),
        ),
      ) as String);

  @override
  _i9.Future<dynamic> uploadFileGetURL(
    String? extension, {
    String? folder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFileGetURL,
          [extension],
          {#folder: folder},
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  String getFileExtension(_i12.File? file) => (super.noSuchMethod(
        Invocation.method(
          #getFileExtension,
          [file],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getFileExtension,
            [file],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getFileExtension,
            [file],
          ),
        ),
      ) as String);

  @override
  _i9.Future<dynamic> uploadFile(
    String? uploadUrl,
    _i12.File? file,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            uploadUrl,
            file,
          ],
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ImageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageService extends _i1.Mock implements _i13.ImageService {
  @override
  _i9.Future<bool> requestPermissions() => (super.noSuchMethod(
        Invocation.method(
          #requestPermissions,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i12.File?> pickImageFromCamera() => (super.noSuchMethod(
        Invocation.method(
          #pickImageFromCamera,
          [],
        ),
        returnValue: _i9.Future<_i12.File?>.value(),
        returnValueForMissingStub: _i9.Future<_i12.File?>.value(),
      ) as _i9.Future<_i12.File?>);

  @override
  _i9.Future<_i12.File?> pickImageFromGallery() => (super.noSuchMethod(
        Invocation.method(
          #pickImageFromGallery,
          [],
        ),
        returnValue: _i9.Future<_i12.File?>.value(),
        returnValueForMissingStub: _i9.Future<_i12.File?>.value(),
      ) as _i9.Future<_i12.File?>);

  @override
  _i9.Future<List<_i12.File>> pickMultipleImages() => (super.noSuchMethod(
        Invocation.method(
          #pickMultipleImages,
          [],
        ),
        returnValue: _i9.Future<List<_i12.File>>.value(<_i12.File>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i12.File>>.value(<_i12.File>[]),
      ) as _i9.Future<List<_i12.File>>);
}

/// A class which mocks [WebsocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebsocketService extends _i1.Mock implements _i14.WebsocketService {
  @override
  _i9.Stream<_i15.WebSocketConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i9.Stream<_i15.WebSocketConnectionStatus>.empty(),
        returnValueForMissingStub:
            _i9.Stream<_i15.WebSocketConnectionStatus>.empty(),
      ) as _i9.Stream<_i15.WebSocketConnectionStatus>);

  @override
  _i9.Stream<_i16.MessagePayload> get messageStream => (super.noSuchMethod(
        Invocation.getter(#messageStream),
        returnValue: _i9.Stream<_i16.MessagePayload>.empty(),
        returnValueForMissingStub: _i9.Stream<_i16.MessagePayload>.empty(),
      ) as _i9.Stream<_i16.MessagePayload>);

  @override
  _i9.Stream<_i16.TypingPayload> get typingStream => (super.noSuchMethod(
        Invocation.getter(#typingStream),
        returnValue: _i9.Stream<_i16.TypingPayload>.empty(),
        returnValueForMissingStub: _i9.Stream<_i16.TypingPayload>.empty(),
      ) as _i9.Stream<_i16.TypingPayload>);

  @override
  _i9.Stream<_i16.OnlineStatusPayload> get onlineStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#onlineStatusStream),
        returnValue: _i9.Stream<_i16.OnlineStatusPayload>.empty(),
        returnValueForMissingStub: _i9.Stream<_i16.OnlineStatusPayload>.empty(),
      ) as _i9.Stream<_i16.OnlineStatusPayload>);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i15.WebSocketConnectionStatus get currentStatus => (super.noSuchMethod(
        Invocation.getter(#currentStatus),
        returnValue: _i15.WebSocketConnectionStatus.disconnected,
        returnValueForMissingStub: _i15.WebSocketConnectionStatus.disconnected,
      ) as _i15.WebSocketConnectionStatus);

  @override
  _i9.Future<void> connect(
    String? serverUrl,
    String? authToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [
            serverUrl,
            authToken,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<bool> sendMessage({
    required int? receiverId,
    required String? content,
    String? messageType = 'text',
    String? conversationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #receiverId: receiverId,
            #content: content,
            #messageType: messageType,
            #conversationId: conversationId,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> sendTypingIndicator({
    required String? conversationId,
    required bool? isTyping,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTypingIndicator,
          [],
          {
            #conversationId: conversationId,
            #isTyping: isTyping,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> markMessageAsRead({
    required int? messageId,
    required String? conversationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [],
          {
            #messageId: messageId,
            #conversationId: conversationId,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MessageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageService extends _i1.Mock implements _i17.MessageService {
  @override
  _i15.WebSocketConnectionStatus get connectionStatus => (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i15.WebSocketConnectionStatus.disconnected,
        returnValueForMissingStub: _i15.WebSocketConnectionStatus.disconnected,
      ) as _i15.WebSocketConnectionStatus);

  @override
  Map<String, List<_i16.Message>> get messages => (super.noSuchMethod(
        Invocation.getter(#messages),
        returnValue: <String, List<_i16.Message>>{},
        returnValueForMissingStub: <String, List<_i16.Message>>{},
      ) as Map<String, List<_i16.Message>>);

  @override
  Map<String, Set<int>> get typingUsers => (super.noSuchMethod(
        Invocation.getter(#typingUsers),
        returnValue: <String, Set<int>>{},
        returnValueForMissingStub: <String, Set<int>>{},
      ) as Map<String, Set<int>>);

  @override
  Map<int, bool> get onlineUsers => (super.noSuchMethod(
        Invocation.getter(#onlineUsers),
        returnValue: <int, bool>{},
        returnValueForMissingStub: <int, bool>{},
      ) as Map<int, bool>);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<_i16.Message> getConversationMessages(String? conversationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversationMessages,
          [conversationId],
        ),
        returnValue: <_i16.Message>[],
        returnValueForMissingStub: <_i16.Message>[],
      ) as List<_i16.Message>);

  @override
  Set<int> getTypingUsers(String? conversationId) => (super.noSuchMethod(
        Invocation.method(
          #getTypingUsers,
          [conversationId],
        ),
        returnValue: <int>{},
        returnValueForMissingStub: <int>{},
      ) as Set<int>);

  @override
  bool isUserOnline(int? userId) => (super.noSuchMethod(
        Invocation.method(
          #isUserOnline,
          [userId],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<void> connect(
    String? serverUrl,
    String? authToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [
            serverUrl,
            authToken,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<bool> sendMessage({
    required int? receiverId,
    required String? content,
    String? messageType = 'text',
    String? conversationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #receiverId: receiverId,
            #content: content,
            #messageType: messageType,
            #conversationId: conversationId,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> sendTypingIndicator({
    required String? conversationId,
    required bool? isTyping,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTypingIndicator,
          [],
          {
            #conversationId: conversationId,
            #isTyping: isTyping,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> markMessageAsRead({
    required int? messageId,
    required String? conversationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [],
          {
            #messageId: messageId,
            #conversationId: conversationId,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  void addLocalMessage(
    String? conversationId,
    _i16.Message? message,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addLocalMessage,
          [
            conversationId,
            message,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearConversationMessages(String? conversationId) => super.noSuchMethod(
        Invocation.method(
          #clearConversationMessages,
          [conversationId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i18.ApiService {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i2.SharedPreferencesService get prefsService => (super.noSuchMethod(
        Invocation.getter(#prefsService),
        returnValue: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
        returnValueForMissingStub: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
      ) as _i2.SharedPreferencesService);

  @override
  _i9.Future<_i3.ApiResponse<T>> get<T>(
    String? endpoint, {
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
    T Function(dynamic)? parser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
          {
            #queryParameters: queryParameters,
            #headers: headers,
            #parser: parser,
          },
        ),
        returnValue: _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #get,
            [endpoint],
            {
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #get,
            [endpoint],
            {
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
      ) as _i9.Future<_i3.ApiResponse<T>>);

  @override
  _i9.Future<_i3.ApiResponse<T>> post<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
    T Function(dynamic)? parser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
            #parser: parser,
          },
        ),
        returnValue: _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #post,
            [endpoint],
            {
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #post,
            [endpoint],
            {
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
      ) as _i9.Future<_i3.ApiResponse<T>>);

  @override
  _i9.Future<_i3.ApiResponse<T>> put<T>(
    String? endpoint, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
    T Function(dynamic)? parser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [endpoint],
          {
            #data: data,
            #queryParameters: queryParameters,
            #headers: headers,
            #parser: parser,
          },
        ),
        returnValue: _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #put,
            [endpoint],
            {
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #put,
            [endpoint],
            {
              #data: data,
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
      ) as _i9.Future<_i3.ApiResponse<T>>);

  @override
  _i9.Future<_i3.ApiResponse<T>> delete<T>(
    String? endpoint, {
    Map<String, dynamic>? queryParameters,
    Map<String, String>? headers,
    T Function(dynamic)? parser,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [endpoint],
          {
            #queryParameters: queryParameters,
            #headers: headers,
            #parser: parser,
          },
        ),
        returnValue: _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #delete,
            [endpoint],
            {
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.ApiResponse<T>>.value(_FakeApiResponse_1<T>(
          this,
          Invocation.method(
            #delete,
            [endpoint],
            {
              #queryParameters: queryParameters,
              #headers: headers,
              #parser: parser,
            },
          ),
        )),
      ) as _i9.Future<_i3.ApiResponse<T>>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i19.AuthService {
  @override
  _i2.SharedPreferencesService get prefsService => (super.noSuchMethod(
        Invocation.getter(#prefsService),
        returnValue: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
        returnValueForMissingStub: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
      ) as _i2.SharedPreferencesService);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i9.Future<dynamic> register(_i20.RegistrationModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [model],
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> requestChangePassword(Map<String, dynamic>? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestChangePassword,
          [body],
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> resetPassword(Map<String, dynamic>? body) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [body],
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<_i3.ApiResponse<dynamic>> sign(_i21.LoginModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [model],
        ),
        returnValue: _i9.Future<_i3.ApiResponse<dynamic>>.value(
            _FakeApiResponse_1<dynamic>(
          this,
          Invocation.method(
            #sign,
            [model],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.ApiResponse<dynamic>>.value(
            _FakeApiResponse_1<dynamic>(
          this,
          Invocation.method(
            #sign,
            [model],
          ),
        )),
      ) as _i9.Future<_i3.ApiResponse<dynamic>>);

  @override
  _i9.Future<Map<String, dynamic>> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue:
            _i9.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i9.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i9.Future<Map<String, dynamic>>);

  @override
  _i9.Future<Map<String, dynamic>> appleSignIn() => (super.noSuchMethod(
        Invocation.method(
          #appleSignIn,
          [],
        ),
        returnValue:
            _i9.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i9.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i9.Future<Map<String, dynamic>>);

  @override
  _i9.Future<_i3.ApiResponse<dynamic>> oAuthGoogle(
          {required Map<String, dynamic>? queryParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #oAuthGoogle,
          [],
          {#queryParams: queryParams},
        ),
        returnValue: _i9.Future<_i3.ApiResponse<dynamic>>.value(
            _FakeApiResponse_1<dynamic>(
          this,
          Invocation.method(
            #oAuthGoogle,
            [],
            {#queryParams: queryParams},
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.ApiResponse<dynamic>>.value(
            _FakeApiResponse_1<dynamic>(
          this,
          Invocation.method(
            #oAuthGoogle,
            [],
            {#queryParams: queryParams},
          ),
        )),
      ) as _i9.Future<_i3.ApiResponse<dynamic>>);

  @override
  _i9.Future<_i3.ApiResponse<dynamic>> oAuthApple(
          {required Map<String, dynamic>? queryParams}) =>
      (super.noSuchMethod(
        Invocation.method(
          #oAuthApple,
          [],
          {#queryParams: queryParams},
        ),
        returnValue: _i9.Future<_i3.ApiResponse<dynamic>>.value(
            _FakeApiResponse_1<dynamic>(
          this,
          Invocation.method(
            #oAuthApple,
            [],
            {#queryParams: queryParams},
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.ApiResponse<dynamic>>.value(
            _FakeApiResponse_1<dynamic>(
          this,
          Invocation.method(
            #oAuthApple,
            [],
            {#queryParams: queryParams},
          ),
        )),
      ) as _i9.Future<_i3.ApiResponse<dynamic>>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i22.LocationService {
  @override
  _i9.Future<String?> getCurrentCity() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentCity,
          [],
        ),
        returnValue: _i9.Future<String?>.value(),
        returnValueForMissingStub: _i9.Future<String?>.value(),
      ) as _i9.Future<String?>);

  @override
  _i9.Future<Map<String, double>?> getCoordinatesFromCurrentLocation() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoordinatesFromCurrentLocation,
          [],
        ),
        returnValue: _i9.Future<Map<String, double>?>.value(),
        returnValueForMissingStub: _i9.Future<Map<String, double>?>.value(),
      ) as _i9.Future<Map<String, double>?>);
}

/// A class which mocks [SharedPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesService extends _i1.Mock
    implements _i2.SharedPreferencesService {
  @override
  _i4.SharedPreferences get preferences => (super.noSuchMethod(
        Invocation.getter(#preferences),
        returnValue: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#preferences),
        ),
        returnValueForMissingStub: _FakeSharedPreferences_2(
          this,
          Invocation.getter(#preferences),
        ),
      ) as _i4.SharedPreferences);

  @override
  _i9.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  String? getString(
    String? key, {
    String? defaultValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  _i9.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  int? getInt(
    String? key, {
    int? defaultValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValueForMissingStub: null,
      ) as int?);

  @override
  _i9.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  double? getDouble(
    String? key, {
    double? defaultValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  _i9.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  bool getBool(
    String? key, {
    bool? defaultValue = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  List<String>? getStringList(
    String? key, {
    List<String>? defaultValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStringList,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  _i9.Future<bool> setObject(
    String? key,
    Map<String, dynamic>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setObject,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  Map<String, dynamic>? getObject(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getObject,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as Map<String, dynamic>?);

  @override
  _i9.Future<bool> setObjectList(
    String? key,
    List<Map<String, dynamic>>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setObjectList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  List<Map<String, dynamic>>? getObjectList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getObjectList,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as List<Map<String, dynamic>>?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> removeKeys(List<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #removeKeys,
          [keys],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  Set<String> getAllKeys() => (super.noSuchMethod(
        Invocation.method(
          #getAllKeys,
          [],
        ),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  Map<String, dynamic> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i9.Future<bool> setAuthToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setExpiry(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setExpiry,
          [token],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> clearAuthToken() => (super.noSuchMethod(
        Invocation.method(
          #clearAuthToken,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setIsLoggedIn(bool? isLoggedIn) => (super.noSuchMethod(
        Invocation.method(
          #setIsLoggedIn,
          [isLoggedIn],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  bool getIsLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #getIsLoggedIn,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<bool> setUserInfo(Map<String, dynamic>? userInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserInfo,
          [userInfo],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setAppSettings(Map<String, dynamic>? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAppSettings,
          [settings],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setFirstTimeLaunch(bool? isFirstTime) => (super.noSuchMethod(
        Invocation.method(
          #setFirstTimeLaunch,
          [isFirstTime],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  bool isFirstTimeLaunch() => (super.noSuchMethod(
        Invocation.method(
          #isFirstTimeLaunch,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<bool> setDarkMode(bool? isDarkMode) => (super.noSuchMethod(
        Invocation.method(
          #setDarkMode,
          [isDarkMode],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  bool getDarkMode() => (super.noSuchMethod(
        Invocation.method(
          #getDarkMode,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.Future<bool> setLastKnownLocation(String? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLastKnownLocation,
          [location],
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> setBatch(Map<String, dynamic>? preferences) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBatch,
          [preferences],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  Map<String, dynamic> getBatch(List<String>? keys) => (super.noSuchMethod(
        Invocation.method(
          #getBatch,
          [keys],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [DeepLinkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeepLinkService extends _i1.Mock implements _i23.DeepLinkService {
  @override
  _i9.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void registerHandler(_i24.DeepLinkHandler? handler) => super.noSuchMethod(
        Invocation.method(
          #registerHandler,
          [handler],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeepLinkGeneratorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeepLinkGeneratorService extends _i1.Mock
    implements _i25.DeepLinkGeneratorService {}

/// A class which mocks [ShareService].
///
/// See the documentation for Mockito's code generation for more information.
class MockShareService extends _i1.Mock implements _i26.ShareService {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i27.UserService {
  @override
  _i2.SharedPreferencesService get prefsService => (super.noSuchMethod(
        Invocation.getter(#prefsService),
        returnValue: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
        returnValueForMissingStub: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
      ) as _i2.SharedPreferencesService);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i9.Future<dynamic> getUserProfile() => (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> editUserProfile(
          {required _i28.UpdateProfileInput? profileUpdateInput}) =>
      (super.noSuchMethod(
        Invocation.method(
          #editUserProfile,
          [],
          {#profileUpdateInput: profileUpdateInput},
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> getMyOrganization() => (super.noSuchMethod(
        Invocation.method(
          #getMyOrganization,
          [],
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> getMyOrganizationAnalytics(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyOrganizationAnalytics,
          [id],
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> createOrganization(
          {required _i29.Organization? organization}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrganization,
          [],
          {#organization: organization},
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> followUnfollowUser({
    required int? id,
    required bool? isFollow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #followUnfollowUser,
          [],
          {
            #id: id,
            #isFollow: isFollow,
          },
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i30.FileService {
  @override
  _i5.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_3(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.Logger);

  @override
  set logger(_i5.Logger? _logger) => super.noSuchMethod(
        Invocation.setter(
          #logger,
          _logger,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i12.File> get selectedImages => (super.noSuchMethod(
        Invocation.getter(#selectedImages),
        returnValue: <_i12.File>[],
        returnValueForMissingStub: <_i12.File>[],
      ) as List<_i12.File>);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i9.Future<void> pickImageFromCamera() => (super.noSuchMethod(
        Invocation.method(
          #pickImageFromCamera,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> pickImageFromGallery() => (super.noSuchMethod(
        Invocation.method(
          #pickImageFromGallery,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> pickMultipleImages() => (super.noSuchMethod(
        Invocation.method(
          #pickMultipleImages,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventService extends _i1.Mock implements _i31.EventService {
  @override
  _i2.SharedPreferencesService get prefsService => (super.noSuchMethod(
        Invocation.getter(#prefsService),
        returnValue: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
        returnValueForMissingStub: _FakeSharedPreferencesService_0(
          this,
          Invocation.getter(#prefsService),
        ),
      ) as _i2.SharedPreferencesService);

  @override
  _i9.Future<dynamic> getMyEvents({
    required int? page,
    required int? size,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyEvents,
          [],
          {
            #page: page,
            #size: size,
          },
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> createEvent(
          {required _i32.CreateEventRequest? requestBody}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [],
          {#requestBody: requestBody},
        ),
        returnValue: _i9.Future<dynamic>.value(),
        returnValueForMissingStub: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);
}
